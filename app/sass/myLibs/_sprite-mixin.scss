// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$s-alarm: (0px, 93px, 0px, -93px, 32px, 31px, 155px, 124px, '../img/sprites/sprite.png', 's-alarm', );
$s-arrow-down: (127px, 70px, -127px, -70px, 22px, 12px, 155px, 124px, '../img/sprites/sprite.png', 's-arrow-down', );
$s-arrow-left: (139px, 82px, -139px, -82px, 12px, 22px, 155px, 124px, '../img/sprites/sprite.png', 's-arrow-left', );
$s-arrow-right: (127px, 82px, -127px, -82px, 12px, 22px, 155px, 124px, '../img/sprites/sprite.png', 's-arrow-right', );
$s-arrow-up: (127px, 58px, -127px, -58px, 22px, 12px, 155px, 124px, '../img/sprites/sprite.png', 's-arrow-up', );
$s-book: (32px, 61px, -32px, -61px, 32px, 32px, 155px, 124px, '../img/sprites/sprite.png', 's-book', );
$s-bullseye: (95px, 0px, -95px, 0px, 32px, 32px, 155px, 124px, '../img/sprites/sprite.png', 's-bullseye', );
$s-comment: (0px, 0px, 0px, 0px, 63px, 61px, 155px, 124px, '../img/sprites/sprite.png', 's-comment', );
$s-design: (63px, 0px, -63px, 0px, 32px, 32px, 155px, 124px, '../img/sprites/sprite.png', 's-design', );
$s-equalizer: (127px, 0px, -127px, 0px, 28px, 32px, 155px, 124px, '../img/sprites/sprite.png', 's-equalizer', );
$s-home: (95px, 32px, -95px, -32px, 32px, 31px, 155px, 124px, '../img/sprites/sprite.png', 's-home', );
$s-image: (0px, 61px, 0px, -61px, 32px, 32px, 155px, 124px, '../img/sprites/sprite.png', 's-image', );
$s-monitor: (63px, 32px, -63px, -32px, 32px, 28px, 155px, 124px, '../img/sprites/sprite.png', 's-monitor', );
$s-picture-alt: (95px, 63px, -95px, -63px, 30px, 30px, 155px, 124px, '../img/sprites/sprite.png', 's-picture-alt', );
$s-picture: (64px, 61px, -64px, -61px, 30px, 30px, 155px, 124px, '../img/sprites/sprite.png', 's-picture', );
$s-pointer: (127px, 32px, -127px, -32px, 20px, 26px, 155px, 124px, '../img/sprites/sprite.png', 's-pointer', );
$s-super-team: (32px, 93px, -32px, -93px, 32px, 23px, 155px, 124px, '../img/sprites/sprite.png', 's-super_team', );
$spritesheet-sprites: ($s-alarm, $s-arrow-down, $s-arrow-left, $s-arrow-right, $s-arrow-up, $s-book, $s-bullseye, $s-comment, $s-design, $s-equalizer, $s-home, $s-image, $s-monitor, $s-picture-alt, $s-picture, $s-pointer, $s-super-team, );
$spritesheet: (155px, 124px, '../img/sprites/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
