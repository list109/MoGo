class Accordion{constructor(t){this.classBtn=t,this.checking=this.checking.bind(this),document.addEventListener("click",this.checking),document.documentElement.clientWidth>991&&this.setupSize()}checking(t){t.preventDefault();let e=t.target.closest("[data-accordion-btn]");e&&(e.classList.toggle(this.classBtn),this.revealer(t.target))}revealer(t){let e=t.closest("[data-accordion]");if(!e)return;let s=e.querySelector("[data-accordion-content]");s&&("vertical"==s.dataset.accordionContent&&(s.style.height=s.offsetHeight?0:s.scrollHeight+"px"),"horisontal"==s.dataset.accordionContent&&(s.style.width=s.style.width?"0px":s.scrollWidth+"px"))}setupSize(){document.body.querySelectorAll("[data-accordion-content]").forEach(t=>{t.style.height||(t.style.height=t.offsetHeight+"px")})}}class Counter{constructor(t,e=100){this.elem=t,this.items=t.querySelectorAll("[data-counter]"),this.delay=e,this.timerId,this.isShowen=!1,window.addEventListener("scroll",()=>{this.spoter()})}spoter(){let t=this.elem.getBoundingClientRect();if(t.bottom>0&&t.top<document.documentElement.clientHeight){if(this.isShowen)return;this.isShowen=!0,this.startCounter(this.elem)}else this.isShowen&&(this.isShowen=!1,this.reset(this.elem))}startCounter(){this.timerId=setInterval(()=>{let t=!0;for(let e of this.items){let s=parseInt(e.textContent);if(s<e.dataset.counter&&(t=!1),e==this.items[this.items.length-1]&&s==e.dataset.counter&&t)return void clearInterval(this.timerId);s!=e.dataset.counter&&(e.textContent=s+1)}},this.delay)}reset(){for(let t of this.items)t.textContent="0";clearInterval(this.timerId)}}function menu(t,e,{elements:s,classList:i}){t.onclick=()=>{if(t.classList.contains(e))t.style.top=t.style.left="";else{let e=t.getBoundingClientRect();t.style.left=e.left+"px",t.style.top=e.top+"px"}t.classList.toggle(e),s.forEach((t,e)=>{i[e]&&t.classList.toggle(i[e])})}}class Slider{constructor({slider:t,arrowLeft:e,arrowRight:s}){this.slider=t,t.style.position="relative",t.style.left=0,this.arrowLeft=e,this.arrowRight=s,this.reset=this.reset.bind(this),e.onclick=s.onclick=this.arrows.bind(this),window.addEventListener("resize",this.reset)}arrows(t){let e=this.slider.offsetWidth,s=parseInt(this.slider.style.left),i=t.currentTarget==this.arrowLeft?s+e:s-e;i=i>0?0:this.slider.scrollWidth+i<10?i+e:i,this.slider.style.left=i+"px"}reset(){this.slider.style.left="0px"}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
